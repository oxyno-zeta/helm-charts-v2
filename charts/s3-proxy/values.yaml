# Default values for s3-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: oxynozeta/s3-proxy
  tag: 4.6.0
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  annotations:
    {}
    # add annotations

service:
  type: ClusterIP
  port: 80
  targetPort: "http"
  # nodePort: 8888
  # clusterIP:
  # externalIPs: []
  # loadBalancerIP:
  # loadBalancerSourceRanges: []
  # annotations: {}

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Custom templates declaration
# Will be mounted in /proxy/custom-templates
customTemplates: {}
#   # Bad Request template example
#   bad-request.tpl: |-
#     <!DOCTYPE html>
#     <html>
#       <body>
#         <h1>Bad Request</h1>
#         <p>{{ .Error }}</p>
#       </body>
#     </html>
#   # Add other template files here

# Existing secret
# Will be mounted in /proxy/secret-files
existingSecret:
  ""
  # Example
  # my-awesome-secret

# Secret files for secrets declaration
# Each key will be mounted in /proxy/secret-files
secretFiles:
  {}
  # Example
  # my-syper-secret-file: my-awesome-secret

# Environment variables
env:
  {}
  # Example
  # VARIABLE: VALUE

envFrom:
  []
  # Example (see https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#environment-variables)
  # - secretRef:
  #     name: mysecret
  # - configMapRef:
  #     name: myconfigmap

#
# See configuration of project: https://oxyno-zeta.github.io/s3-proxy/
#
# Note: This is used mainly for configuration parts that cannot be hot reloaded.
#       For example, the server parts like SSL/TLS configuration, ...
#       Or simply because you prefer to have it static and force a force reload of application.
fixedConfigFiles:
  {}
  # server.yaml: |-
  #   # Server configurations
  #   # server:
  #   #   # SSL/TLS configuration
  #   #   ssl:
  #   #     # Is SSL/TLS configuration enabled ?
  #   #     enabled: true
  #   #     # Certificates to serve when connected
  #   #     certificates:
  #   #       - # Note: Exactly one of certificate/certificateUrl and privateKey/privateKeyUrl must be specified.
  #   #         # The PEM encoded certificate
  #   #         certificate: |
  #   #           -----BEGIN CERTIFICATE-----
  #   #           ....
  #   #           -----END CERTIFICATE-----
  #   #         # The URL of a resource containing the certificate
  #   #         # Check other URL types in documentation
  #   #         certificateUrl: arn:aws:ssm:region:accountId:parameter/name
  #   #         # Additional URL configuration if certificateUrl is an S3 URL
  #   #         certificateUrlConfig:
  #   #           # Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys
  #   #           httpTimeout:
  #   #           # AWS region for S3/SSM/Secrets Manager-stored documents
  #   #           awsRegion: us-east-1
  #   #           # Custom endpoint for S3/SSM/Secrets Manager API calls
  #   #           awsEndpoint:
  #   #           # Credentials to access AWS-based documents
  #   #           awsCredentials:
  #   #             accessKey:
  #   #               env: AWS_ACCESS_KEY_ID
  #   #             secretKey:
  #   #               path: secret_key_file
  #   #           # Disable SSL for AWS API calls. This does not affect `https` URLs
  #   #           awsDisableSSL: false
  #   #         # The PEM encoded private key
  #   #         privateKey: |
  #   #           -----BEGIN RSA PRIVATE KEY-----
  #   #           -----END RSA PRIVATE KEY-----
  #   #         # Additional URL configuration if privateKeyUrl is an S3 URL
  #   #         # Check other URL types in documentation
  #   #         privateKeyUrl: arn:aws:secretsmanager:region:accountId:secret/name
  #   #         # Additional URL configuration if privateKeyUrl is an S3 URL
  #   #         privateKeyUrlConfig:
  #   #           # Timeout for HTTP connections (including AWS calls) to get SSL certificate/keys
  #   #           httpTimeout:
  #   #           # AWS region for S3/SSM/Secrets Manager-stored documents
  #   #           awsRegion: us-east-1
  #   #           # Custom endpoint for S3/SSM/Secrets Manager API calls
  #   #           awsEndpoint:
  #   #           # Credentials to access AWS-based documents
  #   #           awsCredentials:
  #   #             accessKey:
  #   #               env: AWS_ACCESS_KEY_ID
  #   #             secretKey:
  #   #               path: secret_key_file
  #   #           # Disable SSL for AWS API calls. This does not affect `https` URLs
  #   #           awsDisableSSL: false
  #   #     # List of hostnames to generate self-signed certificates for
  #   #     selfSignedHostnames:
  #   #       - localhost
  #   #       - localhost.localdomain
  #   #     # The minimum TLS version to allow when a client connects
  #   #     minTLSVersion: TLSv1.2
  #   #     # The maximum TLS version to allow when a client connects
  #   #     maxTLSVersion: TLSv1.3
  #   #     # The TLS ciphers to enable
  #   #     cipherSuites: # See https://pkg.go.dev/crypto/tls#pkg-constants for valid names; the current default is shown below.
  #   #       - TLS_AES_128_GCM_SHA256
  #   #       - TLS_AES_256_GCM_SHA384
  #   #       - TLS_CHACHA20_POLY1305_SHA256
  #   #       - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
  #   #       - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  #   #       - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256

#
# See configuration of project: https://oxyno-zeta.github.io/s3-proxy/
#
# Note: This can put as blank. The application can start without any configuration.
configFiles:
  config.yaml:
    # Log configuration
    log:
      # Log level
      level: info
      # Log format
      format: text

    # Server configurations
    # server:
    #   # Server timeout options
    #   timeouts:
    #     readTimeout: ""
    #     readHeaderTimeout: ""
    #     writeTimeout: ""
    #     idleTimeout: ""
    #   # Compress options
    #   compress:
    #     enabled: true
    #     # Compression level
    #     # level: 5
    #     # Types
    #     # types:
    #     #   - text/html
    #     #   - text/css
    #     #   - text/plain
    #     #   - text/javascript
    #     #   - application/javascript
    #     #   - application/x-javascript
    #     #   - application/json
    #     #   - application/atom+xml
    #     #   - application/rss+xml
    #     #   - image/svg+xml
    #   # CORS configuration
    #   cors:
    #     # Enabled
    #     enabled: false
    #     # Allow all traffic
    #     allowAll: true
    #     # Allow Origins
    #     # Example: https://fake.com
    #     allowOrigins: []
    #     # Allow HTTP Methods
    #     allowMethods: []
    #     # Allow Headers
    #     allowHeaders: []
    #     # Expose Headers
    #     exposeHeaders: []
    #     # Max age
    #     # 300 is the maximum value not ignored by any of major browsers
    #     # Source: https://github.com/go-chi/cors
    #     maxAge: 0
    #     # Allow credentials
    #     allowCredentials: false
    #     # Run debug
    #     debug: false
    #     # OPTIONS method Passthrough
    #     optionsPassthrough: false
    #   # Cache configuration
    #   cache:
    #     # Force no cache headers on all responses
    #     noCacheEnabled: true
    #     # Expires header value
    #     expires:
    #     # Cache-control header value
    #     cacheControl:
    #     # Pragma header value
    #     pragma:
    #     # X-Accel-Expires header value
    #     xAccelExpires:

    # Template configurations
    # templates:
    #   helpers:
    #     - templates/_helpers.tpl
    #   targetList:
    #     path: templates/target-list.tpl
    #     headers:
    #       Content-Type: '{{ template "main.headers.contentType" . }}'
    #     status: "200"
    #   folderList:
    #     path: templates/folder-list.tpl
    #     headers:
    #       Content-Type: '{{ template "main.headers.contentType" . }}'
    #     status: "200"
    #   badRequestError:
    #     path: templates/bad-request-error.tpl
    #     headers:
    #       Content-Type: '{{ template "main.headers.contentType" . }}'
    #     status: "400"
    #   forbiddenError:
    #     path: templates/forbidden-error.tpl
    #     headers:
    #       Content-Type: '{{ template "main.headers.contentType" . }}'
    #     status: "403"
    #   internalServerError:
    #     path: templates/internal-server-error.tpl
    #     headers:
    #       Content-Type: '{{ template "main.headers.contentType" . }}'
    #     status: "500"
    #   notFoundError:
    #     path: templates/not-found-error.tpl
    #     headers:
    #       Content-Type: '{{ template "main.headers.contentType" . }}'
    #     status: "404"
    #   unauthorizedError:
    #     path: templates/unauthorized-error.tpl
    #     headers:
    #       Content-Type: '{{ template "main.headers.contentType" . }}'
    #     status: "401"
    #   put:
    #     path: templates/put.tpl
    #     headers: {}
    #     status: "204"
    #   delete:
    #     path: templates/delete.tpl
    #     headers: {}
    #     status: "204"

    # Authentication Providers
    # authProviders:
    #   # Header providers
    #   # This authentication method should be used only with a software like [Oauth2-proxy](https://github.com/oauth2-proxy/oauth2-proxy) or an authentication gateway that put headers with user information inside.
    #   # Warning: S3-proxy won't validate headers value or anything else. It will take values as they are coming.
    #   header:
    #     oauth2-proxy:
    #       usernameHeader: x-forwarded-preferred-username
    #       emailHeader: x-forwarded-email
    #       groupsHeader: x-forwarded-groups
    #   # OIDC providers
    #   oidc:
    #     provider1:
    #       clientID: client-id
    #       clientSecret:
    #         path: client-secret-in-file # client secret file
    #       state: my-secret-state-key # do not use this in production ! put something random here
    #       issuerUrl: https://issuer-url/
    #       redirectUrl: http://localhost:8080/ # /auth/oidc/callback will be added automatically
    #       scopes: # OIDC Scopes (defaults: openid, email, profile)
    #         - openid
    #         - email
    #         - profile
    #       groupClaim: groups # path in token
    #       # cookieDomains: [] # Cookie domains matching the request host
    #       # cookieSecure: true # Is the cookie generated secure ?
    #       # cookieName: oidc # Cookie generated name
    #       emailVerified: true # check email verified field from token
    #       # loginPath: /auth/provider1 # Override login path dynamically generated from provider key
    #       # callbackPath: /auth/provider1/callback # Override callback path dynamically generated from provider key
    #   # Basic auth providers
    #   basic:
    #     provider2:
    #       realm: My Basic Auth Realm

    # List targets feature
    # This will generate a webpage with list of targets with links using targetList template
    # listTargets:
    #   # To enable the list targets feature
    #   enabled: false
    #   ## Mount point
    #   mount:
    #     path:
    #       - /
    #     # A specific host can be added for filtering. Otherwise, all hosts will be accepted
    #     # host: localhost:8080
    #   ## Resource configuration
    #   resource:
    #     # A Path must be declared for a resource filtering
    #     path: /
    #     # HTTP Methods authorized (Must be in GET, PUT or DELETE)
    #     methods:
    #       - GET
    #       - PUT
    #       - DELETE
    #     # Whitelist
    #     whitelist: false
    #     # A authentication provider declared in section before, here is the key name
    #     provider: provider1
    #     # OIDC section for access filter
    #     oidc:
    #       # NOTE: This list can be empty ([]) for authentication only and no group filter
    #       authorizationAccesses: # Authorization accesses : groups or email or regexp
    #         - group: devops_users
    #     # Header section for access filter
    #     header:
    #       # NOTE: This list can be empty ([]) for authentication only and no group filter
    #       authorizationAccesses: # Authorization accesses : groups or email or regexp
    #         - group: devops_users
    #     # Basic authentication section
    #     basic:
    #       credentials:
    #         - user: user1
    #           password:
    #             path: password1-in-file

    # Targets map
    targets:
      first-bucket:
        ## Mount point
        mount:
          path:
            - /
          # A specific host can be added for filtering. Otherwise, all hosts will be accepted
          # host: localhost:8080
        # ## Resources declaration
        # ## WARNING: Think about all path that you want to protect. At the end of the list, you should add a resource filter for /* otherwise, it will be public.
        # resources:
        #   # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path)
        #   - path: /
        #     # Whitelist
        #     whiteList: true
        #   # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path)
        #   - path: /specific_doc/*
        #     # HTTP Methods authorized (Must be in GET, PUT or DELETE)
        #     methods:
        #       - GET
        #       - PUT
        #       - DELETE
        #     # A authentication provider declared in section before, here is the key name
        #     provider: provider1
        #     # OIDC section for access filter
        #     oidc:
        #       # NOTE: This list can be empty ([]) for authentication only and no group filter
        #       authorizationAccesses: # Authorization accesses : groups or email or regexp
        #         - group: specific_users
        #   # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path)
        #   - path: /directory1/*
        #     # HTTP Methods authorized (Must be in GET, PUT or DELETE)
        #     methods:
        #       - GET
        #       - PUT
        #       - DELETE
        #     # A authentication provider declared in section before, here is the key name
        #     provider: provider1
        #     # Basic authentication section
        #     basic:
        #       credentials:
        #         - user: user1
        #           password:
        #             path: password1-in-file
        #   # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path)
        #   - path: /opa-protected/*
        #     # OIDC section for access filter
        #     oidc:
        #       # Authorization through OPA server configuration
        #       authorizationOPAServer:
        #         # OPA server url with data path
        #         url: http://localhost:8181/v1/data/example/authz/allowed
        #   # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path)
        #   - path: /specific_doc/*
        #     # HTTP Methods authorized (Must be in GET, PUT or DELETE)
        #     methods:
        #       - GET
        #       - PUT
        #       - DELETE
        #     # A authentication provider declared in section before, here is the key name
        #     provider: provider1
        #     # Header section for access filter
        #     header:
        #       # NOTE: This list can be empty ([]) for authentication only and no group filter
        #       authorizationAccesses: # Authorization accesses : groups or email or regexp
        #         - group: specific_users
        #   # A Path must be declared for a resource filtering (a wildcard can be added to match every sub path)
        #   - path: /opa-protected/*
        #     # Header section for access filter
        #     header:
        #       # Authorization through OPA server configuration
        #       authorizationOPAServer:
        #         # OPA server url with data path
        #         url: http://localhost:8181/v1/data/example/authz/allowed
        # ## Actions
        # actions:
        #   # Action for GET requests on target
        #   GET:
        #     # Will allow GET requests
        #     enabled: true
        #     # Configuration for GET requests
        #     config:
        #       # Redirect with trailing slash when a file isn't found
        #       redirectWithTrailingSlashForNotFoundFile: true
        #       # Index document to display if exists in folder
        #       indexDocument: index.html
        #       # Allow to add headers to streamed files (can be templated)
        #       streamedFileHeaders: {}
        #       # Webhooks
        #       webhooks: []
        #   # Action for PUT requests on target
        #   PUT:
        #     # Will allow PUT requests
        #     enabled: true
        #     # Configuration for PUT requests
        #     config:
        #       # Metadata key/values that will be put on S3 objects.
        #       # Values can be templated. Empty values will be flushed.
        #       metadata:
        #         key: value
        #       # Storage class that will be used for uploaded objects
        #       # See storage class here: https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html
        #       # Values can be templated. Empty values will be flushed.
        #       storageClass: STANDARD # GLACIER, ...
        #       # Will allow override objects if enabled
        #       allowOverride: false
        #       # Webhooks
        #       webhooks: []
        #   # Action for DELETE requests on target
        #   DELETE:
        #     # Will allow DELETE requests
        #     enabled: true
        #     # Configuration for DELETE requests
        #     config:
        #       # Webhooks
        #       webhooks: []
        # # Key rewrite list
        # # This will allow to rewrite keys before doing any requests to S3
        # # For more information about how this works, see in the documentation.
        # keyRewriteList:
        #   - # Source represents a Regexp (golang format with group naming support)
        #     source: ^/(?P<one>\w+)/(?P<two>\w+)/(?P<three>\w+)?$
        #     # Target type: Regex or Template
        #     # Regex will allow to do a simple regex replace/update, like in the example
        #     # Template will allow to do golang template replace, like this example as "target" value: {{ regexReplaceAll "/input1(/.*)" .Key (printf "/input1/%s${1}" .User.Username) }}
        #     # targetType: REGEX # TEMPLATE
        #     # Target represents the template of the new key that will be used
        #     target: /$two/$one/$three/$one/
        ## Target custom templates
        # templates:
        #   # Helpers
        #   helpers:
        #   - inBucket: false
        #     path: ""
        #   # Folder list template
        #   folderList:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "200"
        #   # Not found error template
        #   notFoundError:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "404"
        #   # Internal server error template
        #   internalServerError:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "500"
        #   # Forbidden error template
        #   forbiddenError:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "403"
        #   # Unauthorized error template
        #   unauthorizedError:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "401"
        #   # Bad Request error template
        #   badRequestError:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "400"
        #   # PUT template
        #   put:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "204"
        #   # DELETE template
        #   delete:
        #     inBucket: false
        #     path: ""
        #     headers: {}
        #     status: "204"
        ## Bucket configuration
        bucket:
          name: super-bucket
          prefix:
          region: eu-west-1
          s3Endpoint:
          disableSSL: false
          # s3ListMaxKeys: 1000
          # credentials:
          #   accessKey:
          #     env: AWS_ACCESS_KEY_ID
          #   secretKey:
          #     path: secret_key_file

# Sidecars
# The full container definition is available here.
sidecars: []

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# livenessProbe:
#   initialDelaySeconds: 0
#   periodSeconds: 10
#   timeoutSeconds: 1
#   successThreshold: 1
#   failureThreshold: 3

# readinessProbe:
#   initialDelaySeconds: 0
#   periodSeconds: 10
#   timeoutSeconds: 1
#   successThreshold: 1
#   failureThreshold: 3

## ServiceMonitor configuration in case you are using Prometheus Operator
prometheus:
  serviceMonitor:
    ## If true a ServiceMonitor for each enabled exporter will be installed
    enabled: false
    ## The namespace where the ServiceMonitor(s) will be installed
    # namespace: monitoring
    ## The selector the Prometheus instance is searching for
    ## [Default Prometheus Operator selector] (https://github.com/helm/charts/blob/f5a751f174263971fafd21eee4e35416d6612a3d/stable/prometheus-operator/templates/prometheus/prometheus.yaml#L74)
    labels: {}
    scheme: http
    # interval: 30s
    # scrapeTimeout: 30s
    # metricRelabelings: []
    # relabelings: []

# Arbitrary non-identifying metadata for s3-proxy pods.
podAnnotations:
  {}
  # prometheus.io/scrape: "true"
  # prometheus.io/path: "/metrics"
  # prometheus.io/port: "9090"

# Extra pod labels.
podLabels: {}

grafana:
  # Use this only if you are using the Grafana operator from https://github.com/integr8ly/grafana-operator
  operator:
    enabled: false
    ## The namespace where the GrafanaDashboard will be installed
    # namespace: monitoring
    # Extra labels for selector
    labels: {}
  # Use this only if you are using the Grafana sidecar from kiwigrid/k8s-sidecar
  configmap:
    enabled: false
    ## The namespace where the ConfigMap will be installed
    # namespace: monitoring
    # Extra labels for selector
    labels: {}

podDisruptionBudget:
  # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  enabled: false
  minAvailable: 1
  maxUnavailable:

deploymentStrategy:
  {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0

podSecurityContext:
  fsGroup: 1000

# This is the declaration of the default volumes mount paths
# in the s3-proxy container in pod.
# This can be override for sidecar usage for example, init containers, ...
# Use this with extra volumes feature.
# Note: This doesn't change the fact that the application will use the /proxy/conf
# directory to find the configurations.
volumeMountPaths:
  configurations: /proxy/conf
  secrets: /proxy/secret-files
  customTemplates: /proxy/custom-templates

# This can be used to declare extra volumes.
extraVolumes:
  []
  # - name: test
  #   emptyDir: {}

# This is for extra mounts in the s3-proxy containers only.
# Sidecars or init containers have their own declarations.
extraVolumesMounts:
  []
  # - name: test
  #   mountPath: "/test"

# Init containers declarations.
initContainers: []

# Scheduler name
schedulerName: ""

# Priority class name.
priorityClassName: ""
